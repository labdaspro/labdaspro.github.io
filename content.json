[{"title":"Tipe Data Bentukan","date":"2017-06-07T07:09:47.000Z","path":"2017/06/07/tipe-data-bentukan/","text":"Dalam perjalanan pembuatan program, ada kalanya kita memerlukan tipe data baru yang tidak terdefinisikan sebelumnya pada sebuah bahasa pemrograman. Misalkan untuk menyimpan nilai waktu kita memerlukan tiga variabel yang saling terhubung, yaitu tiga variabel dengan tipe data integer untuk meyimpan nilai jam, menit, dan detik. Jika menggunakan cara konvensional yaitu mendeklarasikan tiga variabel secara manual kemudian mengisikan nilainya, maka akan cukup merepotkan. Belum lagi jika data waktu yang perlu kita simpan dan manipulasi lebih dari satu dan perlu disimpan dengan menggunakan array. Sebagai solusi dari permasalahan tersebut, bahasa pemrograman biasanya menyediakan mekanisme khusus untuk membentuk tipe data baru dengan menggabungkan tipe data primitif yang sudah ada. Dalam bahasa pemrograman C, perintah yang digunakan untuk membentuk struktur tipe data baru adalah mengguanakan perintah struct yang diikuti nama tipe data dan komponen-komponen tipe datanya. Berikut adalah contoh pembuatan/deklarasi struktur tipe data time dengan menggunakan perintah struct: 1234567struct time&#123; int jam; int menit; int detik;&#125;struct time var_time; Pada contoh koding di atas, terlihat pada baris 1 - 4 cara deklarasi tipe data time dengan menggunakan perintah struct yang diikuti dengan nama struktur dan komponen tipe datanya. Sedangkan pada baris 6 ditunjukkan cara penggunaan struktur baru yang telah dideklarasikan adalah menggunakan perintah struct yang diikuti nama struktur dan nama variabelnya. Setelah mendeklarasikan struktur serta variabelnya, kita dapat mengakses komponen dari tipe data tersebut dengan menggunakan operator . (titik) setelah nama variabelnya. Contoh pengaksesan komponen pada struktur sebagaimana ditunjukkan pada koding berikut: 123456struct time var_time;var_time.jam = 2;var_time.menit = 40;var_time.detik = 33;printf(\"%d:%d:%d\", var_time.jam, var_time.menit, var_time.detik); Koding pada baris 2 - 4 mengakses komponen jam, menit, dan detik untuk mengisikan nilai pada komponen variabel tersebut, sedangkan pada baris 6 nilai yang telah diisikan diakses untuk dicetak menggunakan perintah printf. Deklarasi variabel struct baru harus selalu menggunakan kata kunci struct untuk menunjukkan bahwa tipe data time adalah tipe data dalam bentuk struktur. Namun kita dapat mengguanakan perintah typedef untuk memberikan alias pada struktur tersebut sehingga kita dapat menggunakannya selayaknya tipe data primitif lain. Contoh penggunaan typdef ditunjukkan pada koding di bawah ini: 1234567struct s_time&#123; int jam; int menit; int detik;&#125; time;time new_time; Fungsi Operator untuk Tipe Data BentukanMembuat struktur tipe data baru saja tidak cukup. Agar tipe data yang telah kita buat dapat digunakan dengan baik, selain mendeklarasikan strukturnya, kita juga harus membuatkan fungsi-fungsi untuk mengoperasikan tipe data tersebut. Berdasarkan kategori penggunaannya, ada empat jenis fungsi operator yang biasanya dibuat setiap membuat tipe data baru yaitu: Fungsi konstruktor: fungsi yang digunakan untuk membentuk tipe data baru Fungsi selector: fungsi yang digunakan untuk mendapatkan nilai komponen atau nilai tertentu dari tipe data baru Fungsi validator: fungsi yang digunakan untuk memastikan bahwa nilai yang diinputkan pada komponen tipe data valid sesuai logika yang dibuat. Fungsi manipulasi: fungsi untuk melakukan berbagai macam memanipulasi tipe data yang telah dibuat. Berikut adalah dua contoh fungsi konstruktor yang digunakan untuk membuat tipe data time dengan menggunakan dua alternatif cara: 12345678910111213141516171819time make_time(int j, int m, int d)&#123; time waktu; waktu.j = j; waktu.m = m; waktu.d = d; return waktu;&#125;time seconds_2_time(int seconds)&#123; time waktu; waktu.jam = seconds / 3600; waktu.menit = (seconds % 3600) / 60; waktu.detik = seconds % 60; return time;&#125;","tags":[{"name":"struct","slug":"struct","permalink":"http://labdaspro.github.io/tags/struct/"},{"name":"class","slug":"class","permalink":"http://labdaspro.github.io/tags/class/"},{"name":"abstract data type","slug":"abstract-data-type","permalink":"http://labdaspro.github.io/tags/abstract-data-type/"},{"name":"tipe data","slug":"tipe-data","permalink":"http://labdaspro.github.io/tags/tipe-data/"}]},{"title":"Fungsi","date":"2017-06-02T08:13:27.000Z","path":"2017/06/02/Fungsi/","text":"Fungsi merupakan suatu bagian program yang dimaksudkan untuk mengerjakan tugas tertentu dan letaknya terpisah dari program yang memanggilnya. Dalam setiap program dalam bahasa C, minimal terdapat satu buah fungsi yaitu fungsi main(). Berikut adalah contoh pembuatan fungsi dalam bahasa C. Kentungan dalam penggunaan fungsi meliputi: Program akan memiliki struktur yang jelas (mempunyai readability yang tinggi) Bersifat reusability (dapat digunakan kembali) sehingga akan menghindari penulisan program yang sama. Dalam bahasa C, fungsi dapat diklasifikasikan menjadi dua yaitu: Fungsi pustaka atau fungsi yang telah tersedia dalam Bahasa C. Fungsi yang didefinisikan atau dibuat oleh programmer. Cara membuat fungsi sendiri dalam bahasa C adalah sebagai berikut: Sebelum digunakan (dipanggil), suatu fungsi harus dideklarasikan dan didefinisikan terlebih dahulu.Bentuk umum pendeklarasian fungsi adalah : 1tipe_fungsi nama_fungsi(parameter_fungsi); Sedangkan bentuk umum pendefinisian fungsi adalah : 1234567tipe_fungsi nama_fungsi(parameter_fungsi)&#123; statement statement ………... ………...&#125; 12345void print_array(int * data, int n)&#123; for(int i = 0; i &lt; n; i++) printf(\"%d\", data[i]);&#125;","tags":[{"name":"fungsi","slug":"fungsi","permalink":"http://labdaspro.github.io/tags/fungsi/"}]},{"title":"Hello World","date":"2017-06-02T07:10:28.000Z","path":"2017/06/02/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]